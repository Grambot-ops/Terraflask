services:
  # Flask Application Service
  application:
    build:
      context: . # Build context is this directory (Docker/)
      dockerfile: Dockerfile # Dockerfile is in this directory
    container_name: flask_crud_app
    restart: unless-stopped
    env_file:
      - ./.env # .env file is in this directory
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "5000"
    networks:
      - app-network
    environment:
      # Pass DATABASE_URL explicitly to entrypoint.sh if needed for robust checks
      - DATABASE_URL=${DATABASE_URL}
      # Add any other necessary env vars here if not solely relying on .env

  # Database Service (PostgreSQL)
  db:
    image: postgres:14-alpine
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - ./.env # .env file is in this directory
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data # Persist database data
    networks:
      - app-network
    # ports: # Only expose for debugging
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Proxy Service
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      # Mount custom config from ./nginx subdirectory relative to docker-compose.yaml
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - application
    networks:
      - app-network

# Networks Definition
networks:
  app-network:
    driver: bridge

# Volumes Definition
volumes:
  db-data:
    driver: local
